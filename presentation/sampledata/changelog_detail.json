{
  "repo_id": "8e10bcf7-1ac6-46a4-95a4-4bbfe2d7e009",
  "changelog": "# RxAndroid Releases #\n\n### Version 1.2.1 - June 16th 2016 ###\n\n * New: `AndroidSchedulers.reset()` allows clearing the scheduler cache such that the next call to\n   `AndroidSchedulers.mainThread()` will ask the `RxAndroidSchedulerHook` to re-create it. This API\n   is experimental to match `Schedulers.reset()` in RxJava.\n * RxJava dependency now points at v1.1.6.\n\n\n### Version 1.2.0 - May 4th 2016 ###\n\n * Rewrite the Android-specific schedulers (main thread or custom) to greatly reduce allocation and\n   performance overhead of scheduling work.\n * `HandlerScheduler.create` has been deprecated in favor of `AndroidSchedulers.from(Looper)` as\n   a `Looper` is the actual mechanism of scheduling on Android, not `Handler`.\n * Fix: Correct the behavior of `AndroidSchedulers.mainThread()` to only invoke the registered\n   `RxAndroidSchedulersHook` for creating the main thread scheduler and to cache the result instead\n   of invoking it every time. This behvior change eliminates a performance overhead and brings\n   behavior in line with RxJava. If you were relying on the ability to change the main thread\n   scheduler over time (such as for tests), return a delegating scheduler from the hook which allows\n   changing the delegate instance at will.\n * RxJava dependency now points at v1.1.4.\n * `RxAndroidPlugins.reset()` is now marked as `@Experimental` to match the RxJava method of the\n   same name and behavior.\n\n\n### Version 1.1.0 - December 9th 2015 ###\n\n * New: `MainThreadSubscription` utility class runs its `onUnsubscribe` action on the Android main\n   thread. This aids in adding tear-down actions which must be executed on the main thread without\n   having to deal with posting to the main thread yourself.\n * Fix: Lazily initialize `mainThread()` scheduler so that no Android code is run when overridden.\n   This allows unit tests overriding the implementation to work correctly.\n * RxJava dependency now points at v1.1.0.\n\n\n### Version 1.0.1 - August 9th 2015 ###\n\n * Fix: Correctly check `isUnsubscribed()` state in `HandlerScheduler`'s worker before scheduling\n   more work.\n * Fix: Eliminate a potential race condition in `HandlerScheduler` to ensure any posted work will\n   be canceled on unsubscription.\n\n\n### Version 1.0.0 - August 5th 2015 ###\n\nInitial stable release!\n\nIn order to provide a library that no project using RxJava would hesitate to depend on, the decision\nwas made to remove the APIs which were not absolutely fundamental to all apps. That is what's\ncontained in this release.\n\nFunctionality which was previously part of this library is being explored in separate, modular\nlibraries:\n\n * `LifecycleObservable`: https://github.com/trello/RxLifecycle\n * `ViewObservable` and `WidgetObservable`: https://github.com/JakeWharton/RxBinding\n\nThis allows for a simpler process of design, development, and experimentation for the\nbest ways to provide features like hooks into the lifecycle, binding to UI components, and\nsimplifying interaction with all of Android's API. Not only can these projects now have their own\nrelease schedule, but it allows developers to pick and choose which ones are appropriate for your\napplication.\n\nApplications using the various APIs which were previously in this library do not need to update\nimmediately. Due to the number of APIs removed, switching to 1.0 and the use of these third-party\nlibraries should be done gradually.\n\nBreaking changes:\n\n * `AndroidSchedulers.handlerThread()` is now `HandlerScheduler.from()`.\n * **All other APIs have been removed** aside from `AndroidSchedulers.mainThread()`,\n   `RxAndroidPlugins`, and `RxAndroidSchedulersHook`.\n\n\n### Version 0.25 - June 27th 2015 ###\n\n* New: `RxAndroidPlugins` and its `RxAndroidSchedulersHook` provides a mechanism similar to `RxJavaPlugins` (and its `RxJavaSchedulersHook`) for\n  changing the scheduler returned from `AndroidSchedulers.mainThread()` as well as a callback for each subscription on any `Handler`-based scheduler.\n* Fix: Ensure errors are properly propagated from `ContentObservable.fromCursor`.\n* Fix: `LifecycleObservable` now correctly unsubscribes from its sources.\n\nBreaking changes:\n\n* Users of `AppObservable.bindFragment` with a support-v4 `Fragment` should now use `bindSupportFragment`.\n\n\n### Version 0.24 – January 3rd 2015 ###\n\nThis release has some breaking changes:\n\n* `rx.android.observables.AndroidObservable` has changed to `rx.android.app.AppObservable`;\n* `ViewObservable` has moved from `rx.android.observables` to `rx.android.view`\n* (as part of RxJava's breaking changes) [`collect` has changed](https://github.com/ReactiveX/RxJava/blob/1a94d55fa8896931175896d09b86dca8d8d44f72/CHANGES.md#collect)\n\n\n### Version 0.22 – October 15th 2014 ###\n\nThis release adds a number of new operators:\n\n* [Pull 25](https://github.com/ReactiveX/RxAndroid/pull/25) Add operator to monitor SharedPreference changes\n* [Pull 22](https://github.com/ReactiveX/RxAndroid/pull/22) Add view state event types to streamline ViewObservable\n* [Pull 20](https://github.com/ReactiveX/RxAndroid/pull/20) Add OperatorAdapterViewOnItemClick to observe OnItemClick events in AdapterViews\n\n\n### Version 0.21 – October 1st 2014 ###\n\nInitial release outside the RxJava core project, no changes.",
  "latest_version": "### Version 1.2.1 - June 16th 2016 ###",
  "latest_changelog": "* New: `AndroidSchedulers.reset()` allows clearing the scheduler cache such that the next call to\n   `AndroidSchedulers.mainThread()` will ask the `RxAndroidSchedulerHook` to re-create it. This API\n   is experimental to match `Schedulers.reset()` in RxJava.\n * RxJava dependency now points at v1.1.6.",
  "sha": "6e9b08dec9376437d9444bd509d4bde76877c4d9",
  "created_at": "Jan 6, 2018 12:15:14 PM",
  "updated_at": "Jan 6, 2018 12:15:14 PM"
}
